# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
    ARCHIVE_NAME: ${{ github.event.repository.name }}
    # -${{ github.event.release.tag_name }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  prepare:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
            node-version: "lts/*"
        # - name: Install dependencies
        #   run: npm clean-install 
        # - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        #   run: npm audit signatures
      - name: Create Sematic Release Version
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
            export HOME=/tmp
            git config --global user.email "ruediger@pretzlaff.info"
            git config --global user.name "ruedigerp"
            git config --global credential.helper cache
            npx semantic-release
            # npx -p node@v18-lts -c "npx semantic-release"

  # This workflow contains a single job called "build"
  build:
    needs: [ prepare ]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      # - name: Run a one-line script
      #   run: echo Hello, world!

      # # Runs a set of commands using the runners shell
      # - name: Run a multi-line script
      #   run: |
      #     echo Add other actions to build,
      #     echo test, and deploy your project.
      - name: create-folder ${{ env.ARCHIVE_NAME }}
        run: |
          VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
          mkdir ${{ env.ARCHIVE_NAME }}-$VERSION
      - name: copy files 
        run: |
          VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
          cp -av bin etc enabled run.sh README.md ${{ env.ARCHIVE_NAME }}--$VERSION
      - name: create-archive
        run: |
          VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
          tar -czf "$ARCHIVE_NAME-$VERSION".tar.gz ${{ env.ARCHIVE_NAME }}-$VERSION
      - name: create-checksum
        run: |
          VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
          sha256sum "$ARCHIVE_NAME-$VERSION".tar.gz >checksum.txt

      - name: Upload the package as release asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.ARCHIVE_NAME }}-$VERSION.tar.gz
          asset_name: ${{ env.ARCHIVE_NAME }}-$VERSION.tar.gz
          asset_content_type: application/x-compressed-tar

      # - name: upload-archive
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ github.event.release.upload_url }}
      #     asset_path: ${{ env.ARCHIVE_NAME }}-$VERSION.tar.gz
      #     asset_name: ${{ env.ARCHIVE_NAME }}-$VERSION.tar.gz
      #     asset_content_type: application/gzip
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

